events {
    worker_connections 1024;
}

http {
    # map_hash_bucket_size 증가
    map_hash_bucket_size 128;

    # Origin 매핑 설정
    map $http_origin $cors_origin {
        default "";
        "http://geniusgame-admin.s3-website.ap-northeast-2.amazonaws.com" "http://geniusgame-admin.s3-website.ap-northeast-2.amazonaws.com";
        "https://geniusgame.kr" "https://geniusgame.kr";
        "http://geniusgame.kr" "http://geniusgame.kr";
        "http://geniusgame-frontend-staging.s3-website.ap-northeast-2.amazonaws.com" "http://geniusgame-frontend-staging.s3-website.ap-northeast-2.amazonaws.com";
        # 로컬 개발용 추가
        "http://localhost:3000" "http://localhost:3000";
        "http://localhost:8080" "http://localhost:8080";
    }

    upstream backend {
        server web:8000;
    }

    server {
        listen 80;
        server_name localhost 1a3p6i.geniusgame.kr;

        # CloudFront에서 오는 요청 처리를 위한 헤더 설정
        set $forwarded_proto $http_x_forwarded_proto;
        if ($forwarded_proto = '') {
            set $forwarded_proto $scheme;
        }

        # 모든 요청에 적용할 CORS 헤더
        add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS, PUT' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Max-Age' '3600' always;

        location / {
            # OPTIONS 요청 처리
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS, PUT' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' '3600' always;
                return 204;
            }

            # 에러 응답에도 CORS 헤더 적용
            error_page 401 403 404 500 502 503 504 = @cors_error;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $forwarded_proto;

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # 에러 응답을 위한 location 블록
        location @cors_error {
            add_header 'Access-Control-Allow-Origin' "$cors_origin" always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, OPTIONS, PUT' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' '3600' always;
            internal;
        }
    }
}
